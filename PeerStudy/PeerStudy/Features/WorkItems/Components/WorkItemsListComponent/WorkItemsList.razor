@using Microsoft.AspNetCore.Authorization;
@using PeerStudy.Core.Enums;
@using PeerStudy.Core.Models.WorkItems
@using PeerStudy.Features.WorkItems.Components.CreateUpdateWorkItemComponent
@using PeerStudy.Features.WorkItems.Components.WorkItemDetailsComponent
@using PeerStudy.Features;

@page "/{studyGroupName}/{studyGroupId:guid}/work-items"
@attribute [Authorize]
@inherits PeerStudyComponentBase

<div>
    <Header Title="@StudyGroupName"></Header>

    <Loading IsLoading="isLoading"
             HasData="@(allWorkItems != null && allWorkItems.Any())"
             NotFoundMessage="@noWorkItemsMessage">

        <ChildContentForNoData>
            <AuthorizeView Roles="Student">
                @if (!isReadOnly)
                {
                    <MatButton Icon="@MatIconNames.Add" OnClick="@(() => showAddWorkItemDialog = true)"></MatButton>
                }
            </AuthorizeView>

        </ChildContentForNoData>

        <ChildContent>
            <div class="filter">
                <div class="dropdown-container">
                    <MatSelectValue Style="@dropdownStyles"
                                    Label="Assigned to"
                                    Value="@selectedStudentIdFilter"
                                    Items="studentDropDownItems"
                                    ValueSelector="@(x=>x.Key)"
                                    ValueChanged="@(new EventCallback<string>(this, HandleSelectedStudentChanged))">
                        <ItemTemplate Context="itemmenucontext"><span>@itemmenucontext?.Value</span></ItemTemplate>
                    </MatSelectValue>
                </div>
                <div class="dropdown-container">
                    <MatSelectItem Style="@dropdownStyles"
                                   Label="Status"
                                   Value="@selectedWorkItemStatusFilter"
                                   ValueChanged="@(async (WorkItemStatus? value) => await HandleSelectedWorkItemStatusChanged(value))"
                                   Items="workItemStatusesForFiltering">
                    </MatSelectItem>
                </div>
                <span class="reset-filter" @onclick="ResetFilters" title="Reset Filters">X</span>
            </div>

            <div>
                <AuthorizeView Roles="Student">
                    @if (!isReadOnly)
                    {
                        <MatButton Icon="@MatIconNames.Add" OnClick="@(() => showAddWorkItemDialog = true)"></MatButton>
                    }
                </AuthorizeView>

                <MatButton Disabled="AreButtonsDisabled()" Icon="@MatIconNames.Visibility" OnClick="ShowWorkItemDetails"></MatButton>

                <AuthorizeView Roles="Student">
                    @if (!isReadOnly)
                    {
                        <MatButton Disabled="AreButtonsDisabled()" Icon="@MatIconNames.Edit" OnClick="EditWorkItem"></MatButton>
                        <MatButton Disabled="AreButtonsDisabled()" Icon="@MatIconNames.Delete" OnClick="DeleteWorkItem"></MatButton>
                    }
                </AuthorizeView>
            </div>


            <DataGrid TItem="WorkItemDetailsModel"
                      Data="filteredWorkItems"
                      @bind-SelectedRow="@selectedRow"
                            Responsive
                            ShowPager
                            ShowPageSizes
                      PagerPosition="DataGridPagerPosition.Bottom"
                      PagerOptions="new(){ ButtonSize=Size.Small }">
                <DataGridColumns>
                    <DataGridCommandColumn />
                    <DataGridColumn Field="@nameof(WorkItemDetailsModel.Title)" Caption="Title">
                        <DisplayTemplate>
                            <div class="title-field">
                                @context.Title
                            </div>
                        </DisplayTemplate>
                    </DataGridColumn>
                    <DataGridColumn Field="@nameof(WorkItemDetailsModel.AssignedToFullName)" Caption="Assigned To" />
                    <DataGridColumn Field="@nameof(WorkItemDetailsModel.Status)" Caption="State" />
                </DataGridColumns>

                <PageButtonTemplate>
                    <Span TextColor="TextColor.Success">
                        @context.PageNumber
                    </Span>
                </PageButtonTemplate>
                <NextPageButtonTemplate><Icon Name="IconName.StepForward" TextColor="TextColor.Success" /></NextPageButtonTemplate>
                <PreviousPageButtonTemplate><Icon Name="IconName.StepBackward" TextColor="TextColor.Success" /></PreviousPageButtonTemplate>
                <LastPageButtonTemplate><Icon Name="IconName.Forward" TextColor="TextColor.Success" /></LastPageButtonTemplate>
                <FirstPageButtonTemplate><Icon Name="IconName.Backward" TextColor="TextColor.Success" /></FirstPageButtonTemplate>
                <TotalItemsTemplate><Badge Color="Color.Success">@context.TotalItems total items</Badge></TotalItemsTemplate>
                <TotalItemsShortTemplate><Badge Color="Color.Success">@context.TotalItems</Badge></TotalItemsShortTemplate>
                <ItemsPerPageTemplate></ItemsPerPageTemplate>
                <PageSelectorTemplate>
                    <Select TextColor="TextColor.Success" @bind-SelectedValue="@context.CurrentPage" Size="Size.Small">
                        @for (int i = context.FirstVisiblePage; i <= context.LastVisiblePage; ++i)
                        {
                            var pageNumber = i;
                            <SelectItem Value="@pageNumber">@pageNumber</SelectItem>
                        }
                    </Select>
                </PageSelectorTemplate>
                <PageSizesTemplate>
                    <Select TextColor="TextColor.Success" @bind-SelectedValue="@context.CurrentPageSize" Size="Size.Small">
                        @foreach (var pageSize in context.PageSizes)
                        {
                            <SelectItem Value="@pageSize">@pageSize</SelectItem>
                        }
                    </Select>
                </PageSizesTemplate>
            </DataGrid>

            <WorkItemDetails WorkItem="@selectedRow"
                             IsVisible="showSelectedTaskDetails"
                             OnClose="CloseWorkItemDetailsPopup">
            </WorkItemDetails>
        </ChildContent>

        <ChildContentAlwaysDisplayed>
            <CreateUpdateWorkItem WorkItemModel="workItemModel"
                                  IsVisible="showAddWorkItemDialog"
                                  Students="@studentDropDownItems"
                                  WorkItemStatuses="workItemStatuses"
                                  OnCancel="CancelAddWorkItem"
                                  OnSave="AddWorkItem">
            </CreateUpdateWorkItem>

            <CreateUpdateWorkItem WorkItemModel="workItemModel"
                                  IsVisible="showEditWorkItemDialog"
                                  Students="@studentDropDownItems"
                                  WorkItemStatuses="workItemStatuses"
                                  SelectedStudent="@selectedStudent"
                                  OnCancel="CancelEditWorkItem"
                                  OnSave="SaveUpdatedWorkItem">
            </CreateUpdateWorkItem>
        </ChildContentAlwaysDisplayed>
    </Loading>
</div>